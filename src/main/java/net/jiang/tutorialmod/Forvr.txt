检测是不是在VR中
if (world.isClient && VRPluginVerify.hasAPI && VRPlugin.API.playerInVR(user)) {   //有MC-VR-API并且在VR中的时候
    user.sendMessage(Text.literal("在VR里"),false);
}else{

}
or
 if (world.isClient && VRPluginVerify.clientInVR() && VRPlugin.API.apiActive(Minecraft.getInstance().player)


两点之间绘制粒子
private void generateParticles(World world, Vec3d particlePosition, Vec3d lastParticlePosition) {
    if (lastParticlePosition != null) {
        double distance = particlePosition.distanceTo(lastParticlePosition);
        int density = 40; // 设置粒子密度，可以根据需要调整
        int numParticles = (int) (density * distance);
        if(numParticles<=0){
            numParticles=1;
        }
        Vec3d direction = particlePosition.subtract(lastParticlePosition).normalize();
        for (int i = 1; i <= numParticles; i++) {
            double ratio = (double) i / numParticles;
            double x = lastParticlePosition.x + ratio * distance * direction.x;
            double y = lastParticlePosition.y + ratio * distance * direction.y;
            double z = lastParticlePosition.z + ratio * distance * direction.z;
            world.addParticle(ModParticles.CITRINE_PARTICLE, true, x, y, z, red, green, blue);
            ParticleStorage.getOrCreateForWorld().addParticle(new Vec3d(x, y, z), red, green, blue);
        }
    } else {
        world.addParticle(ModParticles.CITRINE_PARTICLE, true, particlePosition.x, particlePosition.y, particlePosition.z, red, green, blue);
        ParticleStorage.getOrCreateForWorld().addParticle(particlePosition, red, green, blue);
    }
}



获取VR玩家信息
Vec3d currentPosMainController = getControllerPosition(user,0);
Vec3d currentPosOffController = getControllerPosition(user,1);
Vec3d currentPosHMD = getHMDPosition(user);

private static Vec3d getHMDPosition(PlayerEntity player) {
    IVRAPI vrApi = VRPlugin.API; // 这里假设 VRPlugin 是你的 VR 插件类
    if (vrApi != null && vrApi.apiActive(player)) {
        return vrApi.getVRPlayer(player).getHMD().position();
    }
    return null;
}
private static Vec3d getControllerPosition(PlayerEntity player, int controllerIndex) {
    IVRAPI vrApi = VRPlugin.API; // 这里假设 VRPlugin 是你的 VR 插件类
    if (vrApi != null && vrApi.apiActive(player)) {
        return vrApi.getVRPlayer(player).getController(controllerIndex).position();
    }
    return null;
}
